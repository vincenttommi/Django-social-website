from django  import forms
from .models import Image
from django.core.files.base import ContentFile
from django.utils.text  import  slugify
import requests

class ImageCreateForm(forms.ModelForm):
    class Meta:
        model  = Image
        fields  = ['title','url','description']
        widgets  = {
            'url': forms.HiddenInput,
        }
    #defined a model form from Image model, including only the title,url,and description fields 
    #users will not enter  the image URL directly in the form
    def  clean_url(self):
        
        url = self.cleaned_data['url']
        valid_extensions  = ['jpg','jpeg','png']
        extension = url.rsplit('.', 1)[1].lower()
        if extension not in valid_extensions:
            raise forms.ValidationError('The given URL does not match valid  image extension')
        
        return url
    #defined a value  url field  to retieve the method  to clean url field
    # The value  of url is retrieved  by accessing the cleaned_data dictionary of the form instance
    
   #URL is split to check wether  the file has a valid extension , if the  ValidationError is raised 
   #the  form instance  is not validated
    


    def save(self, force_insert=False, force_update=False, commit=True):
        image = super().save(commit=False)
        #New image instance is  created by calling the save() method of form with commit=False
        image_url = self.cleaned_data['url']
        #url of image is retrieved by  cleaned_data dictionary form
        name = slugify(image.title)
        #an Image generated by combining  image title slug with original file extension of image
        extension = image_url.rsplit('.', 1)[1].lower()
        # 
        image_name = f'{name}.{extension}'

        # Download image from given URL
        response = requests.get(image_url)
        image.image.save(image_name, ContentFile(response.content), save=False)
        #Requests python library  is used to  download  the  image  by sending an HTTP GETrequest
        #using the image  URL

        if commit:
            image.save()
            #The save ()method  of the image  is called , passing it a ContentFile object that is 
            #instantiated with downloaded file contentPO

        return image
